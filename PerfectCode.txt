PROJECT: Write a Digital AdressBook.
=======================================
=======================================

INTRO
========
Very practical.
Step-by-step.
Discussions.
This tutorial will asses your developers.


LESSON 1: How is Good Software ?
===============================
- Easy to read and understand.
	How ?
		UnitTesting.
		Comments
		Documentation
		Analysis
		Good naming Conventions
		Descriptive variable Names.
		Clear Code (not too compact)
		
- Easy to Change
	How ?
			Separation of implementation architecture.
			Use of Interfaces
- Easy to Debug.
	How?
		Separation of implementation architecture.
			MultiTier.
			DomainDriven
	
- Easy to translate to another language.
	How ?
		Design patterns
		OOP
		
- Easy to Test.
	How ?
		UnitTesting
		Design Software UI independent.
		
- OOP OR NOT ?
- Platform independant
	How ?
		Services
		Platform independant languages
		
- Easy to reuse.
	How ?
		Architectures
		Interfaces
		
- Easy to write ??? NO
	Need more discipline
	Need more knowledge
	Need more work (this work makes you save work in the long term)

Discussion: what is the difference between waterfall and agile ?

Conclusion ?
GOOD SOFTWARE SHOULD BE EASY TO CHANGE WITHOUT LOOSING QUALITY.


How to recognize bad software ?
--------------------------------
Solving a bug gives new bugs.
New developers need more time to understand the code.
A lot of globals.
Not Object Oriented.
No clear architecture.
Misleading names of variables and function.
A lot of bugs.
For a change you need changes at other places.
SQL's in the GUI.







TASK 3: Write the User Story or Stories for the Minimal Product.
====================================================================
Epic= Implement a digital Adress Book.
	Feature1 = The user should be able to consult the AdressBook
		UserStory 1:
			A user wants to get an overview of all contact, so he gets an idea how much contacts he has.		
		UserStory 2:
			A User wants an Overview of the Contacts per starting letter so He can know if there is something under that letter.
		UserStory 3:
			A User wants to search for a Name in the list so He can use the Contact Data of that Contact Name.
						
	Feature 2 = The User should be able to update, delete or change Contacts. (CRUD)
		UserStory 1:
			A User wants to add a New Contact so he can use that data later when he needs it.
		UserStory 2:
			A User wants to change or extend the Data about a Contact so it stays up to date.
		UserStory 3:
			A User wants to delete an contact that is not used anymore so it does not find it again in the overview.
			

LESSON2: Analyses
====================
Why do we need to Analyse ?
- To know what the client wants.
- To know the behavior of the software/system.
- To know how much time it will take to develop.

	
User Stories versus Use Cases
--------------------------------
A UserSory is about the needs of the Actors (users, system, administrator)
Actor wants/needs .... so/because..(goal/extra value)...


Use Cases are about behavior (methods of classes)
Use Cases describe the interaction between Actor and the System.
Use Cases have a beginpoint and an endpoint.
Between the beginpoint andendpoint there can be other interactions.
Use Cases have precondition, postcondition, needed events, steps and other paths.

Use Cases have:
- Actor
- System
- Goal
Option:
- Stackholder
- Precondition
- Triggers

Use Cases should not worry about user interfaces.
Use cases can not have more than 10 steps.
You can use use cases in use cases.
Do not use if or else in use cases
Do not use goto in use cases.

			
Task 3: Write Use Cases.
=========================
UseCase1_1: Overview of Contacts
1) START: User asks for an overview of the adress Book Contacts.
2) END: The System gives the overview they can be grouped by Letter and with a count.


UseCase1_2: Overview of Contact under a Tab=Letter
1) START: User asks for an overview of Contacts in the AdressBook with the Same starting letter.
2) END: The System gives the overview of all Contacts with the given Starting Letter.
		PostCondition: Make Add A code like 
			AEP meaning Has adress, Email and Phone 
			A*P means has Adress and Phone.


UseCase1_3A: All Contact starting with Filter Name
1) START: User request all Contacts starting with a certain string.
2) END: The System gives all Contacts with the Name starting the string.

UseCase1_3B: All Contacts containing Filter Name
1) START: User request all Contacts containing a certain string.
2) END: The System gives all Contacts with the Name starting the string.


UseCase2_1: Creation of a new Contact.
1) START: The user requests a Contact Creation
2) The systems asks for a Name Input
3) The User supplies a Not Null Name
4) The System checks if the Name does not yet exists, is not empty, does not contain weird character.
	If the Imput is valid it will go to step 5.
	If the Input is not Valid It will back to step 3.
5) The System will ask for the Street.
6) The User will check the given Street.
	If the Input is Valid we go to step 7
	Else we go to step 9

7) The System will ask for the Postal Code.
	If the input isValid go to step 8
	Else start step 7 again

8) The System will ask for the Town.

9) The System will ask for the Phone Number.

10) The System will ask for the email.
	If the PhoneNumber was Empty then the Email can not be empty.
	If Phone Number and Email are empty go to step 9.
	else go to step 11

11) END: The System makes the New Contact persistent and add it to the adress Book.


UseCase2_2: Change/Update of an Existing Contact
1)START: The User requests a Contact Update
2) The System asks for the Name Input.
3) The System Retrieves the Contact with that Name.
	If Found goto Step 4.
	Else give message and goto step 2.
4) The System Shows the Current Street Value.
5) The System Asks for the New Street Value.
	If the New Street is Empty, The system will 
		Empty Postal Code and Town.
		Goto Step 10
	If the New street is not Empty
		Goto Step 6
6) The System show the Current Postal Code Value.
7) The System asks for the New Postal Code.
	If the New Postal Code is Empty, The system will 
		Empty Street and Town then goto step 10..
	else go to step 8.

8) The System shows the Current value for Town
9) The System asks the New Town.
	If New Town is empty emty also Street, PostalCode and Goto step 10	 

10) The System Shows the CurrentValue of Phone Number
11) The  system asks for the new Value of Phone Number.
12) END: Make the changes persistent and updare the adressbook.


UseCase2_3: Delete a Contact
1) START:The User asks the System to Delete a Contact
2) The Systems asks the Name of the Contact to delete
3) The System removes the Contact from the DB.
4) END: The System adapts the adress Book.



Task4: Estimate How Much Time Needed To Build The System in Man Hours.
=======================================================================
Try 1 estimate by Class
1) AdressBook
2) Contact
3) UseCase1_1
4) UseCase1_2
5) UseCase1_3A
6) UseCase1_3B
7) UseCase2_1
8) UseCase2_2
9) UseCase2_3

9 classes => 900 lines of code => 900x 8€ = 7.200 Euro or 9 days work

Try 2 estimate by UseCase Steps
UseCase1_1 	=> 2 steps
UseCase1_2 	=> 2 steps
UseCase1_3A 	=> 2 steps
UseCase1_3B 	=> 2 steps
UseCase2_1	=> 11 steps
UseCase2_2	=> 12 steps
UseCase2_3	=> 4 steps
----------------------------------
		  35 steps => 200€ per step = 7.000€ per step 
		The price of a step are based on the price per classes.
This is a rough estimation.


Task 5: Start Coding the UseCases
==================================
To make code is to test just start with writing tests.
Rank all the solutions of students from badest to best solution.



